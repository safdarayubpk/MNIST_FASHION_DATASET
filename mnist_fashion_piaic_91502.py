# -*- coding: utf-8 -*-
"""MNIST_FASHION_PIAIC_91502.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yug6mEx6Xi99mkAc3C_6MqU632Atlbua

**Loading MNIST Fashion Data set**
"""

from tensorflow.keras.datasets import fashion_mnist

(train_images, train_labels),(test_images, test_labels) = fashion_mnist.load_data()

"""**Explore the data**"""

train_images.shape



train_labels.shape

len(train_labels)

train_labels

test_images.shape

len(test_labels)



"""**Preprocess the data**"""

import matplotlib.pyplot as plt
plt.figure()
plt.imshow(train_images[0])
plt.colorbar()
plt.grid(False)
plt.show()

"""Scale these values to a range of 0 to 1 before feeding them to the neural network model. To do so, divide the values by 255. It's important that the training set and the testing set be preprocessed in the same way:"""

train_images = train_images / 255.0

test_images = test_images / 255.0

import numpy as np

print(train_labels)
print(np.unique(train_labels))

print(test_labels)
print(np.unique(test_labels))



"""**Build the model**"""



"""The network architechture"""

from tensorflow.keras import models
from tensorflow.keras import  layers

network = models.Sequential()

network.add(layers.Dense(512, activation='relu', input_shape=((28*28),)))
network.add(layers.Dense(10, activation='softmax'))

test_images = test_images.reshape((10000, 28*28))
test_images = test_images.astype('float32')/255



"""**Compile the model**"""

network.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])



"""**Prepairing the image data**"""

train_images = train_images.reshape((60000, 28*28))
train_images = train_images.astype('float32')/255 # Normalize scaled values between 0 and 1

test_images = test_images.reshape((10000, 28*28))
test_images = test_images.astype('float32')/255



"""**Prepairing the labels**"""

train_labels[0]

train_images.shape



"""**One hot encoding**"""

from tensorflow.keras.utils import to_categorical

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)



"""**Train the model**"""

network.fit(train_images, train_labels, epochs=5, batch_size=128)



"""**Evaluate**"""

test_loss, test_acc = network.evaluate(test_images,test_labels)
print('test_acc: ', test_acc)
print('test loss:',test_loss)

